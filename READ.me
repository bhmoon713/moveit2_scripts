This project goal is to set up a UR3e robot arm to serve coffee to customers in the cafeteria.

# Launch the project simulation 
source ~/ros2_ws/install/setup.bash
ros2 launch the_construct_office_gazebo starbots_ur3e.launch.xml

# launch moveit
cd ros2_ws/
colcon build --packages-select my_moveit_config
source ~/ros2_ws/install/setup.bash
ros2 launch my_moveit_config move_group.launch.py
ros2 launch real_moveit_config move_group.launch.py

after lunch, check the followig controller satus, if this is not up and running other steps will have problem.
[spawner-6] [INFO] [1758909533.555353859] [spawner_gripper_controller]: Configured and activated gripper_controller
[spawner-5] [INFO] [1758909533.590410715] [spawner_joint_trajectory_controller]: Configured and activated joint_trajectory_controller
[spawner-4] [INFO] [1758909533.626989005] [spawner_joint_state_broadcaster]: Configured and activated joint_state_broadcaster

ros2 topic echo /joint_states
cd ros2_ws/ros2 control list_controllers

# launch rviz
cd ~/ros2_ws
source install/setup.bash
ros2 launch my_moveit_config moveit_rviz.launch.py
ros2 launch real_moveit_config moveit_rviz.launch.py

# start motionz
cd ~/ros2_ws/
colcon build --packages-select moveit2_scripts
cd ~/ros2_ws/
source install/setup.bash
ros2 launch moveit2_scripts pick_and_place.launch.py


# Object detection, rviz
cd ros2_ws/
colcon build --packages-select object_detection_cpp
source install/setup.bash
ros2 launch object_detection_cpp object_detection.launch.py

# Helps
ros2 run rqt_joint_trajectory_controller rqt_joint_trajectory_controller
ros2 run tf2_ros tf2_echo base_link tool0
ros2 run tf2_ros tf2_echo base_link wrist_rgbd_camera_link
ros2 run tf2_ros tf2_echo base_link wrist_rgbd_camera_depth_frame 
ros2 run tf2_ros tf2_echo wrist_rgbd_camera_link wrist_rgbd_camera_depth_frame 
ros2 launch moveit_setup_assistant setup_assistant.launch.py



user:~$ ros2 action send_goal /gripper_controller/gripper_cmd control_msgs/action/GripperCommand "command:
  position: -0.7
  max_effort: 0.0
"


found 



  <!-- Launches World now independently form spawning robot -->
  <include file="$(find-pkg-share the_construct_office_gazebo)/launch/start_world_standalone.launch.py"/>
  <!-- UR3e Arm -->
  <include file="$(find-pkg-share ur_simulation_gazebo)/launch/ur_sim_starbots.launch.py"/>
  <!-- Spawn Barista -->
  <include file="$(find-pkg-share barista_gazebo)/launch/barista_1.launch.py"/>



    # Spawn robot
    gazebo_spawn_robot = Node(
        package="gazebo_ros",
        executable="spawn_entity.py",
        name="spawn_ur",
        #arguments=["-entity", "ur", "-topic", "robot_description"],
        arguments=['-topic', 'robot_description',
                                   '-x', "13.9", '-y', "-18.56", '-z', "1.032",
                                   '-R', "0.0", '-P', "0.0", '-Y', "0.0",
                                   '-entity', 'ur'],
        output="screen",
    )


# by mistake you have to build whole works space again
colcon build --packages-select custom_msgs
source install/setup.bash
colcon build



ros2 topic echo /joint_states


ros2 run object_detection_cpp object_detection_node --ros-args \
  -p plane.max_x_dist:=0.8 -p plane.min_height:=-0.3 -p plane.max_height:=0.0 \
  -p objects.max_x_dist:=0.8 -p objects.min_height:=0.0 -p objects.max_height:=1.0 \
  -p cluster.tolerance:=0.02 -p cluster.min_size:=1000 -p cluster.max_size:=500000 \
  -p target_frame:=base_link


ros2 run object_detection_cpp object_detection_node --ros-args \
  -p plane.max_x_dist:=2.0 -p plane.min_height:=-0.1 -p plane.max_height:=0.01 \
  -p objects.max_x_dist:=2.0 -p objects.min_height:=0.0 -p objects.max_height:=1.0 \
  -p cluster.tolerance:=0.02 -p cluster.min_size:=1000 -p cluster.max_size:=100000 \
  -p target_frame:=base_link


ros2 topic echo /surface_detected
ros2 topic echo /object_detected



At time 0.0
- Translation: [-0.238, -0.300, 0.200]
- Rotation: in Quaternion [-0.354, 0.354, 0.612, 0.612]
- Rotation: in RPY (radian) [0.000, 1.047, 1.571]
- Rotation: in RPY (degree) [0.000, 60.000, 90.000]
- Matrix:
  0.000 -1.000  0.000 -0.238
  0.500  0.000  0.866 -0.300
 -0.866  0.000  0.500  0.200
  0.000  0.000  0.000  1.000


Setting the scene for model 'name' but model 'ur3e' is loaded.
<xacro:arg name="ur_type" default="ur3e"/>
default_value="ur3e",  // need this for simulation

##remove cups when you fail
ros2 service call /delete_entity gazebo_msgs/srv/DeleteEntity "{name: 'portable_cup_2'}"

## spawn cup again
ros2 run gazebo_ros spawn_entity.py \
  -entity portable_cup_2 \
  -file ~/ros2_ws/src/universal_robot_ros2/the_construct_office_gazebo/models/portable_cup_2/model.sdf \
  -x 14.16 -y -18.19 -z 1.025 \
  -R 1.57 -P 0.0 -Y 0.0


start_world_standalone.launch.py


# tracing gazebo world

start_world_standalone.launch.py
start_world.launch.py
starbots_complete.world

    <model name="portable_cup_2">
      <static>0</static>
      <include>
        <uri>model://portable_cup_2</uri>
      </include>
      <pose>14.16 -18.19 1.025 1.57 0 0</pose>
    </model>


ros2 run gazebo_ros spawn_entity.py \
  -entity portable_cup_1 \
  -file ~/ros2_ws/src/universal_robot_ros2/the_construct_office_gazebo/models/portable_cup_2/model.sdf \
  -x 14.16 -y -18.19 -z 1.025 \
  -R 1.57 -P 0.0 -Y 0.0


# tracing baristabot robot

# tracing gazebo world

def gen_robot_info():

    # pose_1 = [13.64, -18.51, 1.57]
    # pose_1 = [13.58, -18.51, 1.57]
    pose_1 = [13.50, -18.51, 1.57]

    robot_name = "barista_1"
    x_pos = pose_1[0]
    y_pos = pose_1[1]
    yaw_pos = pose_1[2]
    robot = {'name': robot_name, 'x_pose': x_pos,
                    'y_pose': y_pos, 'z_pose': 0.1, 'Y_pose': yaw_pos}

    #print("############### ROBOTS MULTI ARRAY="+str(robot))

    return robot